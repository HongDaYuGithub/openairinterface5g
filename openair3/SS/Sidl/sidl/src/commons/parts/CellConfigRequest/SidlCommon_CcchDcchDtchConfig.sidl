/*
 * Copyright 2022 Sequans Communications.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#pragma once

// SIDL keywords.
#include "msg.sidl"

// SIDL commons.
#include "SidlCommon.sidl"

typedef uint8_t HarqProcessId_Type;
typedef uint16_t TimingAdvance_Period_Type;

typedef struct ASN_NAME(MAC_MainConfig, drx_Config_r13) DRX_Config_r13_Type;
typedef struct ASN_NAME(MAC_MainConfig, eDRX_Config_CycleStartOffset_r13) EDRX_CycleStartOffset_r13_Type;
typedef ASN_NAME(MAC_MainConfig, ul_SCH_Config, ttiBundling) TTI_Bundling_Type;
typedef ASN_NAME(MAC_MainConfig, e_HARQ_Pattern_r12) E_HARQ_Pattern_r12_Type;

struct MeasGapConfig_R8andLater_Type {
	struct ASN_NAME(MeasGapConfig) measGapConfig;
	SIDL_OPTIONAL(bool, mgta);
};

SIDL_UNION_ENUM(MeasGapConfig_Type) {
	MeasGapConfig_Type_UNBOUND_VALUE,
	MeasGapConfig_Type_R8andLater
};
SIDL_UNION_BEGIN(MeasGapConfig_Type) {
	SIDL_UNION_CASE(MeasGapConfig_Type_R8andLater)
		struct MeasGapConfig_R8andLater_Type R8andLater;
} SIDL_UNION_END;

SIDL_UNION_ENUM(MeasGapCtrl_Type) {
	MeasGapCtrl_Type_UNBOUND_VALUE,
	MeasGapCtrl_Type_None,
	MeasGapCtrl_Type_Config
};
SIDL_UNION_BEGIN(MeasGapCtrl_Type) {
	SIDL_UNION_CASE(MeasGapCtrl_Type_None)
		Null_Type None;
	SIDL_UNION_CASE(MeasGapCtrl_Type_Config)
		struct MeasGapConfig_Type Config;
} SIDL_UNION_END;

struct AntennaInfoDedicated_R8andLater_Type {
	struct ASN_NAME(AntennaInfoDedicated) antennaInfo;
	SIDL_OPTIONAL_OF_STRUCT(ASN_NAME(AntennaInfoDedicated_v920), antennaInfo_v920);
};

struct AntennaInfoDedicated_R10andLater_Type {
	struct ASN_NAME(AntennaInfoDedicated_r10) antennaInfo;
	SIDL_OPTIONAL_OF_STRUCT(ASN_NAME(AntennaInfoUL_r10), antennaInfoUL);
	SIDL_OPTIONAL_OF_STRUCT(ASN_NAME(AntennaInfoDedicated_v10i0), antennaInfoDedicated_v10i0);
	SIDL_OPTIONAL_OF_STRUCT(ASN_NAME(AntennaInfoDedicated_v1250), antennaInfoDedicated_v1250);
	SIDL_OPTIONAL_OF_STRUCT(ASN_NAME(AntennaInfoDedicated_v1430), antennaInfoDedicated_v1430);
};

SIDL_UNION_ENUM(AntennaInfoDedicated_Type) {
	AntennaInfoDedicated_Type_UNBOUND_VALUE,
	AntennaInfoDedicated_Type_R8andLater,
	AntennaInfoDedicated_Type_R10andLater
};
SIDL_UNION_BEGIN(AntennaInfoDedicated_Type) {
	SIDL_UNION_CASE(AntennaInfoDedicated_Type_R8andLater)
		struct AntennaInfoDedicated_R8andLater_Type R8andLater;
	SIDL_UNION_CASE(AntennaInfoDedicated_Type_R10andLater)
		struct AntennaInfoDedicated_R10andLater_Type R10andLater;
} SIDL_UNION_END;

typedef SIDL_DYNAMIC(HarqProcessId_Type, HarqProcessList_Type);

SIDL_UNION_ENUM(HarqProcessConfigDL_Type) {
	HarqProcessConfigDL_Type_UNBOUND_VALUE,
	HarqProcessConfigDL_Type_AllProcesses,
	HarqProcessConfigDL_Type_SpecificSubset
};
SIDL_UNION_BEGIN(HarqProcessConfigDL_Type) {
	SIDL_UNION_CASE(HarqProcessConfigDL_Type_AllProcesses)
		Null_Type AllProcesses;
	SIDL_UNION_CASE(HarqProcessConfigDL_Type_SpecificSubset)
		HarqProcessList_Type SpecificSubset;
} SIDL_UNION_END;

struct CcchDcchDtchConfigDL_Type {
	SIDL_OPTIONAL_OF_STRUCT(DciDlInfo_Type, DciInfo);
	SIDL_OPTIONAL_OF_STRUCT(AntennaInfoDedicated_Type, AntennaInfo);
	SIDL_OPTIONAL_OF_STRUCT(HarqProcessConfigDL_Type, HarqProcessConfig);
};

SIDL_UNION_ENUM(TransmissionRepetition_Type) {
	TransmissionRepetition_Type_UNBOUND_VALUE,
	TransmissionRepetition_Type_Continuous,
	TransmissionRepetition_Type_NumOfCycles
};
SIDL_UNION_BEGIN(TransmissionRepetition_Type) {
	SIDL_UNION_CASE(TransmissionRepetition_Type_Continuous)
		Null_Type Continuous;
	SIDL_UNION_CASE(TransmissionRepetition_Type_NumOfCycles)
		int32_t NumOfCycles;
} SIDL_UNION_END;

struct UplinkTimeAlignment_AutoSynch_Type {
	TimingAdvanceIndex_Type TimingAdvance;
	TimingAdvance_Period_Type TA_Period;
	struct TransmissionRepetition_Type TA_Repetition;
};

SIDL_UNION_ENUM(UplinkTimeAlignment_Synch_Type) {
	UplinkTimeAlignment_Synch_Type_UNBOUND_VALUE,
	UplinkTimeAlignment_Synch_Type_None,
	UplinkTimeAlignment_Synch_Type_Auto
};
SIDL_UNION_BEGIN(UplinkTimeAlignment_Synch_Type) {
	SIDL_UNION_CASE(UplinkTimeAlignment_Synch_Type_None)
		Null_Type None;
	SIDL_UNION_CASE(UplinkTimeAlignment_Synch_Type_Auto)
		struct UplinkTimeAlignment_AutoSynch_Type Auto;
} SIDL_UNION_END;

SIDL_UNION_ENUM(ULGrant_Period_Type) {
	ULGrant_Period_Type_UNBOUND_VALUE,
	ULGrant_Period_Type_OnlyOnce,
	ULGrant_Period_Type_Duration
};
SIDL_UNION_BEGIN(ULGrant_Period_Type) {
	SIDL_UNION_CASE(ULGrant_Period_Type_OnlyOnce)
		Null_Type OnlyOnce;
	SIDL_UNION_CASE(ULGrant_Period_Type_Duration)
		int32_t Duration;
} SIDL_UNION_END;

struct PeriodicGrant_Type {
	struct ULGrant_Period_Type Period;
	struct TransmissionRepetition_Type NoOfRepetitions;
};

SIDL_UNION_ENUM(UL_GrantConfig_Type) {
	UL_GrantConfig_Type_UNBOUND_VALUE,
	UL_GrantConfig_Type_OnSR_Reception,
	UL_GrantConfig_Type_Periodic,
	UL_GrantConfig_Type_PeriodicOnSR_Reception,
	UL_GrantConfig_Type_None
};
SIDL_UNION_BEGIN(UL_GrantConfig_Type) {
	SIDL_UNION_CASE(UL_GrantConfig_Type_OnSR_Reception)
		Null_Type OnSR_Reception;
	SIDL_UNION_CASE(UL_GrantConfig_Type_Periodic)
		struct PeriodicGrant_Type Periodic;
	SIDL_UNION_CASE(UL_GrantConfig_Type_PeriodicOnSR_Reception)
		struct PeriodicGrant_Type PeriodicOnSR_Reception;
	SIDL_UNION_CASE(UL_GrantConfig_Type_None)
		Null_Type None;
} SIDL_UNION_END;

struct CcchDcchDtchConfigUL_Type {
	SIDL_OPTIONAL_OF_STRUCT(DciUlInfo_Type, DciInfo);
	SIDL_OPTIONAL_OF_STRUCT(UplinkHoppingControl_Type, Hopping);
	SIDL_OPTIONAL_OF_STRUCT(UplinkTimeAlignment_Synch_Type, PUCCH_Synch);
	SIDL_OPTIONAL_OF_STRUCT(UL_GrantConfig_Type, UL_GrantConfig);
};

struct DRX_Config_R8andLater_Type {
	SIDL_OPTIONAL_OF_STRUCT(ASN_NAME(DRX_Config), R8);
	SIDL_OPTIONAL(DRX_Config_r13_Type, R13);
	SIDL_OPTIONAL(EDRX_CycleStartOffset_r13_Type, EDRX_CycleStartOffset_r13);
};

SIDL_UNION_ENUM(DRX_Config_Type) {
	DRX_Config_Type_UNBOUND_VALUE,
	DRX_Config_Type_R8andLater
};
SIDL_UNION_BEGIN(DRX_Config_Type) {
	SIDL_UNION_CASE(DRX_Config_Type_R8andLater)
		struct DRX_Config_R8andLater_Type R8andLater;
} SIDL_UNION_END;

SIDL_UNION_ENUM(DrxCtrl_Type) {
	DrxCtrl_Type_UNBOUND_VALUE,
	DrxCtrl_Type_None,
	DrxCtrl_Type_Config
};
SIDL_UNION_BEGIN(DrxCtrl_Type) {
	SIDL_UNION_CASE(DrxCtrl_Type_None)
		Null_Type None;
	SIDL_UNION_CASE(DrxCtrl_Type_Config)
		struct DRX_Config_Type Config;
} SIDL_UNION_END;

struct TTI_BundlingConfig_R8andLater_Type {
	TTI_Bundling_Type TTI_BundlingEnabled;
	SIDL_OPTIONAL(E_HARQ_Pattern_r12_Type, E_HARQ_Pattern);
};

SIDL_UNION_ENUM(TTI_BundlingConfig_Type) {
	TTI_BundlingConfig_Type_UNBOUND_VALUE,
	TTI_BundlingConfig_Type_R8,
	TTI_BundlingConfig_Type_R8andLater
};
SIDL_UNION_BEGIN(TTI_BundlingConfig_Type) {
	SIDL_UNION_CASE(TTI_BundlingConfig_Type_R8)
		bool R8;
	SIDL_UNION_CASE(TTI_BundlingConfig_Type_R8andLater)
		struct TTI_BundlingConfig_R8andLater_Type R8andLater;
} SIDL_UNION_END;

struct CcchDcchDtchConfig_Type {
	SIDL_OPTIONAL_OF_STRUCT(MeasGapCtrl_Type, MeasGapCtrl);
	SIDL_OPTIONAL_OF_STRUCT(CcchDcchDtchConfigDL_Type, DL);
	SIDL_OPTIONAL_OF_STRUCT(CcchDcchDtchConfigUL_Type, UL);
	SIDL_OPTIONAL_OF_STRUCT(DrxCtrl_Type, DrxCtrl);
	SIDL_OPTIONAL_OF_STRUCT(TTI_BundlingConfig_Type, TtiBundling);
	SIDL_OPTIONAL(bool, CifPresence);
};
